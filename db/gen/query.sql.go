// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const countFamilies = `-- name: CountFamilies :one
SELECT count(*)
FROM family_members fm
WHERE fm.user_id = ?
`

func (q *Queries) CountFamilies(ctx context.Context, userID sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, countFamilies, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTasksCompletedToday = `-- name: CountTasksCompletedToday :one
SELECT count(*)
FROM tasks t
         JOIN family_members fm ON t.family_id = fm.family_id
WHERE
    fm.user_id = ? AND
    t.status = 'completed' AND
    DATE(t.completed_at) = CURDATE()
`

func (q *Queries) CountTasksCompletedToday(ctx context.Context, userID sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTasksCompletedToday, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTasksPending = `-- name: CountTasksPending :one
SELECT count(*) FROM tasks WHERE status = 'pending'
`

func (q *Queries) CountTasksPending(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTasksPending)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUsersFamilyMembers = `-- name: CountUsersFamilyMembers :one
SELECT COUNT(DISTINCT fm2.user_id)
FROM family_members AS fm1
         JOIN family_members AS fm2 ON fm1.family_id = fm2.family_id
WHERE fm1.user_id = ?
`

func (q *Queries) CountUsersFamilyMembers(ctx context.Context, userID sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUsersFamilyMembers, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createFamily = `-- name: CreateFamily :execresult
INSERT INTO families (name, description, owner_id) VALUES (?, ?, ?)
`

type CreateFamilyParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	OwnerID     sql.NullString `json:"owner_id"`
}

func (q *Queries) CreateFamily(ctx context.Context, arg CreateFamilyParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createFamily, arg.Name, arg.Description, arg.OwnerID)
}

const createFamilyMember = `-- name: CreateFamilyMember :exec
INSERT INTO family_members (id, family_id, user_id, role)
VALUES (?, ?, ?, ?)
`

type CreateFamilyMemberParams struct {
	ID       string         `json:"id"`
	FamilyID sql.NullInt32  `json:"family_id"`
	UserID   sql.NullString `json:"user_id"`
	Role     sql.NullString `json:"role"`
}

func (q *Queries) CreateFamilyMember(ctx context.Context, arg CreateFamilyMemberParams) error {
	_, err := q.db.ExecContext(ctx, createFamilyMember,
		arg.ID,
		arg.FamilyID,
		arg.UserID,
		arg.Role,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, name, email, password_hash)
VALUES (?, ?, ?, ?)
`

type CreateUserParams struct {
	ID           string `json:"id"`
	Name         string `json:"name"`
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
	)
	return err
}

const dashboardPage = `-- name: DashboardPage :many
SELECT
    f.id as id_familia,
    f.name as nome_familia,
    DATE_FORMAT(f.created_at, '%Y-%m-%d %H:%i:%s') as created_at,
    f.is_active as status,
    (SELECT COUNT(*) FROM family_members WHERE family_id = f.id) as total_membros
FROM families f
WHERE f.id IN (
    SELECT family_id FROM family_members fm WHERE fm.user_id = ?
)
ORDER BY f.created_at DESC
LIMIT 5
`

type DashboardPageRow struct {
	IDFamilia    int32        `json:"id_familia"`
	NomeFamilia  string       `json:"nome_familia"`
	CreatedAt    string       `json:"created_at"`
	Status       sql.NullBool `json:"status"`
	TotalMembros int64        `json:"total_membros"`
}

func (q *Queries) DashboardPage(ctx context.Context, userID sql.NullString) ([]DashboardPageRow, error) {
	rows, err := q.db.QueryContext(ctx, dashboardPage, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DashboardPageRow
	for rows.Next() {
		var i DashboardPageRow
		if err := rows.Scan(
			&i.IDFamilia,
			&i.NomeFamilia,
			&i.CreatedAt,
			&i.Status,
			&i.TotalMembros,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password_hash, created_at FROM users WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
    select id, name, email, password_hash, created_at from users where id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getWeeklyTaskCompletionStats = `-- name: GetWeeklyTaskCompletionStats :many
SELECT
    DATE(completed_at) as completion_date,
    COUNT(*) as completed_count
FROM tasks
WHERE
    status = 'completed' AND
    completed_at >= CURDATE() - INTERVAL 7 DAY
GROUP BY completion_date
ORDER BY completion_date DESC
`

type GetWeeklyTaskCompletionStatsRow struct {
	CompletionDate time.Time `json:"completion_date"`
	CompletedCount int64     `json:"completed_count"`
}

func (q *Queries) GetWeeklyTaskCompletionStats(ctx context.Context) ([]GetWeeklyTaskCompletionStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, getWeeklyTaskCompletionStats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWeeklyTaskCompletionStatsRow
	for rows.Next() {
		var i GetWeeklyTaskCompletionStatsRow
		if err := rows.Scan(&i.CompletionDate, &i.CompletedCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFamiliesForUser = `-- name: ListFamiliesForUser :many
SELECT
    f.id, f.name, f.description, f.is_active, f.created_at, f.owner_id
FROM
    families f
        JOIN
    family_members fm ON f.id = fm.family_id
WHERE
    fm.user_id = ?
ORDER BY
    f.created_at DESC
`

type ListFamiliesForUserRow struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	IsActive    sql.NullBool   `json:"is_active"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	OwnerID     sql.NullString `json:"owner_id"`
}

func (q *Queries) ListFamiliesForUser(ctx context.Context, userID sql.NullString) ([]ListFamiliesForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listFamiliesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFamiliesForUserRow
	for rows.Next() {
		var i ListFamiliesForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsActive,
			&i.CreatedAt,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecentFamilies = `-- name: ListRecentFamilies :many
SELECT
    f.id as id_familia,
    f.name as nome_familia,
    DATE_FORMAT(f.created_at, '%Y-%m-%d %H:%i:%s') as created_at,
    f.is_active as status,
    COUNT(fm.id) as total_membros
from families f
LEFT JOIN family_members fm on fm.family_id = f.id
LEFT JOIN users u on fm.user_id = u.id
GROUP BY f.id, f.name, f.created_at, f.is_active
ORDER BY f.created_at DESC
LIMIT 5
`

type ListRecentFamiliesRow struct {
	IDFamilia    int32        `json:"id_familia"`
	NomeFamilia  string       `json:"nome_familia"`
	CreatedAt    string       `json:"created_at"`
	Status       sql.NullBool `json:"status"`
	TotalMembros int64        `json:"total_membros"`
}

func (q *Queries) ListRecentFamilies(ctx context.Context) ([]ListRecentFamiliesRow, error) {
	rows, err := q.db.QueryContext(ctx, listRecentFamilies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRecentFamiliesRow
	for rows.Next() {
		var i ListRecentFamiliesRow
		if err := rows.Scan(
			&i.IDFamilia,
			&i.NomeFamilia,
			&i.CreatedAt,
			&i.Status,
			&i.TotalMembros,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
