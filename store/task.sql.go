// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: task.sql

package store

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const countTasksCompletedToday = `-- name: CountTasksCompletedToday :one
SELECT count(*)
FROM tasks t
         JOIN family_members fm ON t.family_id = fm.family_id
WHERE
    fm.user_id = ? AND
    t.status = 'completed' AND
    DATE(t.completed_at) = CURDATE()
`

func (q *Queries) CountTasksCompletedToday(ctx context.Context, userID sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTasksCompletedToday, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTasksPending = `-- name: CountTasksPending :one
SELECT count(*) FROM tasks WHERE status = 'pending'
`

func (q *Queries) CountTasksPending(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTasksPending)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTask = `-- name: CreateTask :exec
INSERT INTO tasks (
    id, family_id, title, description, status_id, created_by
) VALUES (
     ?, ?, ?, ?, ?, ?
)
`

type CreateTaskParams struct {
	ID          string         `json:"id"`
	FamilyID    sql.NullInt32  `json:"family_id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	StatusID    sql.NullString `json:"status_id"`
	CreatedBy   sql.NullString `json:"created_by"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	_, err := q.db.ExecContext(ctx, createTask,
		arg.ID,
		arg.FamilyID,
		arg.Title,
		arg.Description,
		arg.StatusID,
		arg.CreatedBy,
	)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, family_id, title, description, is_recurring, recurring_days, status_id, created_by, created_at, completed_at from tasks where id = ?
`

func (q *Queries) GetTask(ctx context.Context, id string) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.FamilyID,
		&i.Title,
		&i.Description,
		&i.IsRecurring,
		&i.RecurringDays,
		&i.StatusID,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const getTaskStatus = `-- name: GetTaskStatus :many
SELECT id, name, created_at FROM task_status
`

func (q *Queries) GetTaskStatus(ctx context.Context) ([]TaskStatus, error) {
	rows, err := q.db.QueryContext(ctx, getTaskStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaskStatus
	for rows.Next() {
		var i TaskStatus
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksByFamily = `-- name: GetTasksByFamily :many
SELECT
    t.id, t.family_id, t.title, t.description, t.is_recurring, t.recurring_days, t.status_id, t.created_by, t.created_at, t.completed_at,
    ts.name as status_name
FROM tasks t
         JOIN task_status ts ON t.status_id = ts.id
WHERE t.family_id = ?
`

type GetTasksByFamilyRow struct {
	ID            string          `json:"id"`
	FamilyID      sql.NullInt32   `json:"family_id"`
	Title         string          `json:"title"`
	Description   sql.NullString  `json:"description"`
	IsRecurring   sql.NullBool    `json:"is_recurring"`
	RecurringDays json.RawMessage `json:"recurring_days"`
	StatusID      sql.NullString  `json:"status_id"`
	CreatedBy     sql.NullString  `json:"created_by"`
	CreatedAt     sql.NullTime    `json:"created_at"`
	CompletedAt   sql.NullTime    `json:"completed_at"`
	StatusName    string          `json:"status_name"`
}

func (q *Queries) GetTasksByFamily(ctx context.Context, familyID sql.NullInt32) ([]GetTasksByFamilyRow, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByFamily, familyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTasksByFamilyRow
	for rows.Next() {
		var i GetTasksByFamilyRow
		if err := rows.Scan(
			&i.ID,
			&i.FamilyID,
			&i.Title,
			&i.Description,
			&i.IsRecurring,
			&i.RecurringDays,
			&i.StatusID,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.CompletedAt,
			&i.StatusName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWeeklyTaskCompletionStats = `-- name: GetWeeklyTaskCompletionStats :many
SELECT
    DATE(completed_at) as completion_date,
    COUNT(*) as completed_count
FROM tasks
WHERE
    status = 'completed' AND
    completed_at >= CURDATE() - INTERVAL 7 DAY
GROUP BY completion_date
ORDER BY completion_date DESC
`

type GetWeeklyTaskCompletionStatsRow struct {
	CompletionDate time.Time `json:"completion_date"`
	CompletedCount int64     `json:"completed_count"`
}

func (q *Queries) GetWeeklyTaskCompletionStats(ctx context.Context) ([]GetWeeklyTaskCompletionStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, getWeeklyTaskCompletionStats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWeeklyTaskCompletionStatsRow
	for rows.Next() {
		var i GetWeeklyTaskCompletionStatsRow
		if err := rows.Scan(&i.CompletionDate, &i.CompletedCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
